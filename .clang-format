# 语言: None, Cpp, Java, JavaScript, ObjC, Proto, TableGen, TextProto
Language:        Cpp
# BasedOnStyle:  LLVM

# 访问说明符(public、private等)的偏移
AccessModifierOffset: -4

# 开括号(开圆括号、开尖括号、开方括号)后的对齐: Align, DontAlign, AlwaysBreak(总是在开括号后换行)
AlignAfterOpenBracket: Align

# 对齐数组列
AlignArrayOfStructures: None

# 对齐连续宏定义
AlignConsecutiveMacros: None

# 连续赋值时，对齐所有等号
AlignConsecutiveAssignments: None

# 对齐连续位字段
AlignConsecutiveBitFields: None

# 连续声明时，对齐所有声明的变量名
AlignConsecutiveDeclarations: None

# 左对齐逃脱换行(使用反斜杠换行)的反斜杠
AlignEscapedNewlines: Left

# 水平对齐二元和三元表达式的操作数
AlignOperands: true

# 对齐连续的尾随的注释
AlignTrailingComments: true

# 允许函数声明的所有参数在放在下一行
AllowAllParametersOfDeclarationOnNextLine: true

# 允许短的枚举放在同一行
AllowShortEnumsOnASingleLine: true

# 允许短的块放在同一行
AllowShortBlocksOnASingleLine: Never

# 允许短的case标签放在同一行
AllowShortCaseLabelsOnASingleLine: false

# 允许短的函数放在同一行: None, InlineOnly(定义在类中), Empty(空函数), Inline(定义在类中，空函数), All
AllowShortFunctionsOnASingleLine: All

# 允许短的匿名函数放在同一行
AllowShortLambdasOnASingleLine: All

# 允许短的if语句保持在同一行
AllowShortIfStatementsOnASingleLine: Never

# 允许短的循环保持在同一行
AllowShortLoopsOnASingleLine: false

# 总是在返回类型后换行: None, All, TopLevel(顶级函数，不包括在类中的函数),
# AllDefinitions(所有的定义，不包括声明), TopLevelDefinitions(所有的顶级函数的定义)
AlwaysBreakAfterReturnType: None

# 总是在多行string字面量前换行
AlwaysBreakBeforeMultilineStrings: false

# 总是在template声明后换行
AlwaysBreakTemplateDeclarations: true

AttributeMacros:
  - __capability

# false表示函数实参要么都在同一行，要么都各自一行
BinPackArguments: true

# false表示所有形参要么都在同一行，要么都各自一行
BinPackParameters: true

# 大括号换行，只有当 BreakBeforeBraces 设置为Custom时才有效
BraceWrapping:
  # case 标签后面
  AfterCaseLabel:  false
  # class定义后面
  AfterClass:      true
  # 控制语句后面
  AfterControlStatement: Never
  # enum定义后面
  AfterEnum:       false
  # 函数定义后面
  AfterFunction:   false
  # 命名空间定义后面
  AfterNamespace:  false
  # struct定义后面
  AfterStruct:     false
  # union定义后面
  AfterUnion:      false
  # extern之后
  AfterExternBlock: false
  # catch之前
  BeforeCatch:     false
  # else之前
  BeforeElse:      false
  # lambda之前
  BeforeLambdaBody: false
  # while之前
  BeforeWhile:     false
  # 缩进大括号
  IndentBraces:    false
  # 分离空函数
  SplitEmptyFunction: true
  # 分离空语句
  SplitEmptyRecord: true
  # 分离空命名空间
  SplitEmptyNamespace: true

# 在二元运算符前换行: None(在操作符后换行), NonAssignment(在非赋值的操作符前换行), All(在操作符前换行)
BreakBeforeBinaryOperators: None

# 在concept前换行
BreakBeforeConceptDeclarations: true

# 在大括号前换行: Attach(始终将大括号附加到周围的上下文), Linux(除函数、命名空间和类定义，与Attach类似),
#   Mozilla(除枚举、函数、记录定义，与Attach类似), Stroustrup(除函数定义、catch、else，与Attach类似),
#   Allman(总是在大括号前换行), GNU(总是在大括号前换行，并对于控制语句的大括号增加额外的缩进), WebKit(在函数前换行), Custom
#   注：这里认为语句块也属于函数
BreakBeforeBraces: Custom

# 继承列表样式
BreakInheritanceList: AfterComma

# 在三元运算符前换行
BreakBeforeTernaryOperators: true
#BreakInheritanceList: AfterColon

# 在构造函数的初始化列表的冒号后换行
BreakConstructorInitializers: BeforeComma

BreakStringLiterals: false

# 位域:每边都添加空格
BitFieldColonSpacing: Both

# 每行字符的限制，0表示没有限制
ColumnLimit:     0

# 描述具有特殊意义的注释的正则表达式，它不应该被分割为多行或以其它方式改变
CommentPragmas:  '^ IWYU pragma:'

# 在新行上声明每个命名空间
CompactNamespaces: true

# 构造函数的初始化列表要么都在同一行，要么都各自一行
ConstructorInitializerAllOnOneLineOrOnePerLine: false

# 构造函数的初始化列表的缩进宽度
ConstructorInitializerIndentWidth: 4

# 延续的行的缩进宽度
ContinuationIndentWidth: 4

# 去除C++11的列表初始化的大括号{后和}前的空格
Cpp11BracedListStyle: true

# 继承最常用的换行方式
DeriveLineEnding: true

# 继承最常用的指针和引用的对齐方式
DerivePointerAlignment: false

# 关闭格式化
DisableFormat:   false

# 删除访问修饰符后的所有空行
EmptyLineAfterAccessModifier: Never

# 仅当访问修饰符开始一个新的逻辑块时才添加空行
EmptyLineBeforeAccessModifier: LogicalBlock

# 自动检测函数的调用和定义是否被格式为每行一个参数(Experimental)
ExperimentalAutoDetectBinPacking: false

# 自动补充namespace注释
FixNamespaceComments: true

# 需要被解读为foreach循环而不是函数调用的宏
ForEachMacros:
  - foreach
  - Q_FOREACH
  - BOOST_FOREACH

IfMacros:
  - KJ_IF_MAYBE

# 多个#include块合并在一起并排序为一个
IncludeBlocks:   Merge

# 可以定义负数优先级从而保证某些#include永远在最前面
IncludeCategories:
  - Regex:           '^"(llvm|llvm-c|clang|clang-c)/'
    Priority:        2
    SortPriority:    0
    CaseSensitive:   false
  - Regex:           '^(<|"(gtest|gmock|isl|json)/)'
    Priority:        3
    SortPriority:    0
    CaseSensitive:   false
  - Regex:           '.*'
    Priority:        1
    SortPriority:    0
    CaseSensitive:   false
IncludeIsMainRegex: '(Test)?$'
IncludeIsMainSourceRegex: ''

# 缩进访问修饰符
IndentAccessModifiers: false

# 缩进case标签
IndentCaseLabels: false

# case 标签后面的块使用与 case 标签相同的缩进级别
IndentCaseBlocks: false

# 缩进goto标签。
IndentGotoLabels: false

# 缩进预处理器指令
IndentPPDirectives: None

# 向后兼容缩进外部块
IndentExternBlock: AfterExternBlock

# 缩进模板中的requires子句
IndentRequires:  false

# 缩进宽度
IndentWidth:     4

# 函数返回类型换行时，缩进函数声明或函数定义的函数名
IndentWrappedFunctionNames: false

# 插入尾随逗号
InsertTrailingCommas: None

# 保留在块开始处的空行
KeepEmptyLinesAtTheStartOfBlocks: false

# 相对于 lambda 签名对齐 lambda 主体
LambdaBodyIndentation: Signature

# 开始一个块的宏的正则表达式
MacroBlockBegin: ''

# 结束一个块的宏的正则表达式
MacroBlockEnd:   ''

# 引用的对齐
ReferenceAlignment: Pointer

# 连续空行的最大数量
MaxEmptyLinesToKeep: 1

# 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), All
NamespaceIndentation: None

PenaltyBreakAssignment: 2
PenaltyBreakBeforeFirstCallParameter: 19
PenaltyBreakComment: 300
PenaltyBreakFirstLessLess: 120
PenaltyBreakString: 1000
PenaltyBreakTemplateDeclaration: 10
PenaltyExcessCharacter: 1000000
PenaltyReturnTypeOnItsOwnLine: 60
PenaltyIndentedWhitespace: 0

# 缩进预处理器语句的列数
PPIndentWidth:   -1

# 指针和引用的对齐: Left, Right, Middle
PointerAlignment: Left

# 允许重新排版注释
ReflowComments: true

# 允许排序#include
SortIncludes:    CaseSensitive

# 允许排序 using 声明
SortUsingDeclarations: true

# 在C风格类型转换后添加空格
SpaceAfterCStyleCast: false

# 在Template 关键字后面添加空格
SpaceAfterTemplateKeyword: true

# 在赋值运算符之前添加空格
SpaceBeforeAssignmentOperators: true

# 开圆括号之前添加一个空格: Never, ControlStatements, Always
SpaceBeforeParens: ControlStatements

# 在空的圆括号中添加空格
SpaceInEmptyParentheses: false

# 在尾随的评论前添加的空格数(只适用于//)
SpacesBeforeTrailingComments: 1

# 在尖括号的<后和>前添加空格
SpacesInAngles: false

# 在C风格类型转换的括号中添加空格
SpacesInCStyleCastParentheses: false

# 在容器(ObjC和JavaScript的数组和字典等)字面量中添加空格
SpacesInContainerLiterals: true

# 在!后添加空格
SpaceAfterLogicalNot: false

# 不在case冒号之前添加空格
SpaceBeforeCaseColon: false

# 不在C++11大括号列表之前添加空格
SpaceBeforeCpp11BracedList: false

# 在构造函数初始化器冒号之前添加空格
SpaceBeforeCtorInitializerColon: true

# 在继承冒号前添加空格
SpaceBeforeInheritanceColon: true

# 不要确保指针限定符周围有空格，而是使用 PointerAlignment
SpaceAroundPointerQualifiers: Default

# 在基于范围的for循环冒号之前添加空格
SpaceBeforeRangeBasedForLoopColon: true

# {}中间不添加空格
SpaceInEmptyBlock: false

# 不在if/for/switch/while条件周围插入空格
SpacesInConditionalStatement: false

# 行注释开头允许有多少个空格。要禁用最大值，请将其设置为-1，除此之外，最大值优先于最小值
SpacesInLineCommentPrefix:
  Minimum:         1
  Maximum:         -1

# 在圆括号的(后和)前添加空格
SpacesInParentheses: false

# 在方括号的[后和]前添加空格，lamda表达式和未指明大小的数组的声明不受影响
SpacesInSquareBrackets: false

# 不在[前添加空格
SpaceBeforeSquareBrackets: false

# 短命名空间跨越的最大展开行数
ShortNamespaceLines: 1

# 标准: Cpp03, Cpp11, Auto
Standard:        Auto

# 在语句前面被忽略的宏定义，就好像它们是一个属性一样
StatementAttributeLikeMacros:
  - Q_EMIT

# 应该被解释为完整语句的宏定义
StatementMacros:
  - Q_UNUSED
  - QT_REQUIRE_VERSION

# tab宽度
TabWidth: 4

# 使用\n换行
UseCRLF: false

# 使用tab字符: Never, ForIndentation, ForContinuationAndIndentation, Always
UseTab: Never

# 对空格敏感的宏定义
WhitespaceSensitiveMacros:
  - STRINGIZE
  - PP_STRINGIZE
  - BOOST_PP_STRINGIZE
  - NS_SWIFT_NAME
  - CF_SWIFT_NAME
